!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).Component={})}(this,(function(e){"use strict";const t=Symbol("__run__"),r=Symbol("__root__"),o=Symbol("__render__"),n=Symbol("__state__"),s=Symbol("__store__"),i={enumerable:!1,configurable:!1,writable:!1};function c(e,t=s,r){return e.reflector=r||this.requestUpdate.bind(this),Object.defineProperty(this,t,{...i,value:e}),!0}function a(e,t=n,r){const o=this,s=new Proxy({...e},{get(e,t){const r=e[t];if(r)return r.value},set(e,t,n){const s=e[t];if(s&&s.value!==n){if(s.type&&typeof n!=typeof s.type())throw new Error(`Wrong type of propery "${t}".`);return s.value=n,"function"==typeof r?r(n,t):o.requestUpdate&&o.requestUpdate(n,t),!0}return!1}});Object.defineProperty(this,t,{...i,value:s})}class u extends HTMLElement{static define(e,t,r=!1){return window.customElements.get(e)?r&&Array.from(document.querySelectorAll(e)).forEach(e=>{Object.setPrototypeOf(e,t.prototype),e.requestUpdate&&e.requestUpdate()}):window.customElements.define(e,t),t}static get mode(){return"open"}static set render(e){"function"==typeof e&&(this[o]=e)}get state(){return this[n]||null}get store(){return this[s]||null}constructor(...e){super(e);const{state:n,mode:s,mixins:i,store:d}=this.constructor;if("function"!=typeof u[o])throw new Error('Renderer is undefined. For example set "lit-html" render function');s&&"string"==typeof s&&(this[r]=this.attachShadow({mode:s})),n&&"object"==typeof n&&a.call(this,n),d&&"object"==typeof d&&c.call(this,d),Array.isArray(i)&&i.forEach(t=>t.created&&t.created.apply(this,e)),u[t](["created"],this)}static[t](e,t,r){e.forEach(e=>t[e]&&"function"==typeof t[e]&&t[e].apply(t,r))}connectedCallback(){const{mixins:e}=this.constructor;Array.isArray(e)&&e.forEach(e=>e.mounted&&e.mounted.call(this)),u[t](["mounted","requestUpdate"],this)}disconnectedCallback(){const{mixins:e}=this.constructor;Array.isArray(e)&&e.forEach(e=>e.unmounted&&e.unmounted.call(this)),u[t](["unmounted","requestUpdate"],this)}requestUpdate(){const e=this.shadowRoot||this[r]||this,t=u[o];return new Promise((r,o)=>{this.render?r(t(this.render(),e,{eventContext:this})):o(new Error("Render method is missing"))})}}e.__state__=n,e.__store__=s,e.attachStore=c,e.createState=a,e.default=u,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
