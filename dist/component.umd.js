!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).Component={})}(this,(function(t){"use strict";const e=Symbol("__run__"),r=Symbol("__root__"),o=Symbol("__render__"),n=Symbol("__state__"),s=Symbol("__store__"),i={enumerable:!1,configurable:!1,writable:!1};function c(t,e=s,r){return t.reflector=r||this.requestUpdate.bind(this),Object.defineProperty(this,e,{...i,value:t}),!0}function u(t,e=n,r){const o=this,s=new Proxy({...t},{get(t,e){const r=t[e];if(r)return r.value},set(t,e,n){const s=t[e];if(s&&s.value!==n){if(s.type&&typeof n!=typeof s.type())throw new Error(`Wrong type of propery "${e}".`);return s.value=n,"function"==typeof r?r(n,e):o.requestUpdate&&o.requestUpdate(n,e),!0}return!1}});Object.defineProperty(this,e,{...i,value:s})}class a extends HTMLElement{static define(t,e,r=!1){return window.customElements.get(t)?r&&Array.from(document.querySelectorAll(t)).forEach(t=>{Object.setPrototypeOf(t,e.prototype),t.requestUpdate&&t.requestUpdate()}):window.customElements.define(t,e),e}static get mode(){return"open"}static set render(t){"function"==typeof t&&(this[o]=t)}get state(){return this[n]||null}get store(){return this[s]||null}constructor(...t){super(t);const{state:n,mode:s,mixins:i,store:d}=this.constructor;if("function"!=typeof this.constructor[o])throw new Error('Renderer is undefined. For example set "lit-html" render function');s&&"string"==typeof s&&(this[r]=this.attachShadow({mode:s})),n&&"object"==typeof n&&u.call(this,n),d&&"object"==typeof d&&c.call(this,d),Array.isArray(i)&&i.forEach(e=>e.created&&e.created.apply(this,t)),a[e](["created"],this)}static[e](t,e,r){t.forEach(t=>e[t]&&"function"==typeof e[t]&&e[t].apply(e,r))}connectedCallback(){const{mixins:t}=this.constructor;Array.isArray(t)&&t.forEach(t=>t.mounted&&t.mounted.call(this)),a[e](["mounted","requestUpdate"],this)}disconnectedCallback(){const{mixins:t}=this.constructor;Array.isArray(t)&&t.forEach(t=>t.unmounted&&t.unmounted.call(this)),a[e](["unmounted","requestUpdate"],this)}requestUpdate(){const t=this.shadowRoot||this[r]||this,e=this.constructor[o];return new Promise((r,o)=>{this.render?r(e(this.render(),t,{eventContext:this})):o(new Error("Render method is missing"))})}}t.__state__=n,t.__store__=s,t.attachStore=c,t.createState=u,t.default=a,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
